/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SiteImport } from './routes/site'
import { Route as SalesImport } from './routes/sales'
import { Route as ProductsImport } from './routes/products'
import { Route as OrdersImport } from './routes/orders'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SiteRoute = SiteImport.update({
  path: '/site',
  getParentRoute: () => rootRoute,
} as any)

const SalesRoute = SalesImport.update({
  path: '/sales',
  getParentRoute: () => rootRoute,
} as any)

const ProductsRoute = ProductsImport.update({
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const OrdersRoute = OrdersImport.update({
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsImport
      parentRoute: typeof rootRoute
    }
    '/sales': {
      id: '/sales'
      path: '/sales'
      fullPath: '/sales'
      preLoaderRoute: typeof SalesImport
      parentRoute: typeof rootRoute
    }
    '/site': {
      id: '/site'
      path: '/site'
      fullPath: '/site'
      preLoaderRoute: typeof SiteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/orders': typeof OrdersRoute
  '/products': typeof ProductsRoute
  '/sales': typeof SalesRoute
  '/site': typeof SiteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/orders': typeof OrdersRoute
  '/products': typeof ProductsRoute
  '/sales': typeof SalesRoute
  '/site': typeof SiteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/orders': typeof OrdersRoute
  '/products': typeof ProductsRoute
  '/sales': typeof SalesRoute
  '/site': typeof SiteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/orders' | '/products' | '/sales' | '/site'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/orders' | '/products' | '/sales' | '/site'
  id: '__root__' | '/' | '/orders' | '/products' | '/sales' | '/site'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrdersRoute: typeof OrdersRoute
  ProductsRoute: typeof ProductsRoute
  SalesRoute: typeof SalesRoute
  SiteRoute: typeof SiteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrdersRoute: OrdersRoute,
  ProductsRoute: ProductsRoute,
  SalesRoute: SalesRoute,
  SiteRoute: SiteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/orders",
        "/products",
        "/sales",
        "/site"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/orders": {
      "filePath": "orders.tsx"
    },
    "/products": {
      "filePath": "products.tsx"
    },
    "/sales": {
      "filePath": "sales.tsx"
    },
    "/site": {
      "filePath": "site.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
